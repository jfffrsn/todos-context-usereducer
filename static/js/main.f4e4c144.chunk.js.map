{"version":3,"sources":["hooks/useToggleState.js","hooks/useInputState.js","reducer/todo.reducer.js","context/todos.context.js","hooks/useLocalStorageReducer.js","EditTodoForm.js","Todo.js","TodoList.js","TodoForm.js","TodoApp.js","App.js","serviceWorker.js","index.js"],"names":["useToggle","initialVal","useState","state","setState","toggle","value","setValue","e","target","reducer","action","type","id","uuid","task","completed","filter","todo","map","newTask","defaultTodos","TodosContext","createContext","DispatchContext","TodosProvider","props","key","defaultVal","useReducer","JSON","parse","window","localStorage","getItem","String","dispatch","useEffect","setItem","stringify","useLocalStorageReducer","todoReducer","todos","Provider","children","EditTodoForm","toggleEditForm","useContext","useInputState","handleChange","reset","console","log","onSubmit","preventDefault","style","marginLeft","width","margin","onChange","fullWidth","autoFocus","memo","useToggleState","isEditing","height","tabIndex","checked","onClick","textDecoration","aria-label","TodoList","length","i","Fragment","TodoForm","padding","label","TodoApp","backgroundColor","elevation","color","position","container","justify","marginTop","item","xs","md","lg","App","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.f4e4c144.chunk.js","sourcesContent":["import { useState } from \"react\";\r\nfunction useToggle(initialVal = false) {\r\n  // call useState, \"reserve piece of state\"\r\n  const [state, setState] = useState(initialVal);\r\n  const toggle = () => {\r\n    setState(!state);\r\n  };\r\n  // return piece of state AND a function to toggle it\r\n  return [state, toggle];\r\n}\r\nexport default useToggle;\r\n","import { useState } from \"react\";\r\nexport default initialVal => {\r\n  const [value, setValue] = useState(initialVal);\r\n  const handleChange = e => {\r\n    setValue(e.target.value);\r\n  };\r\n  const reset = () => {\r\n    setValue(\"\");\r\n  };\r\n  return [value, handleChange, reset];\r\n};\r\n","import uuid from \"uuid/v4\";\r\nconst reducer = (state, action) => {\r\n  switch (action.type) {\r\n    case \"ADD\":\r\n      return [...state, { id: uuid(), task: action.task, completed: false }];\r\n    case \"REMOVE\":\r\n      return state.filter(todo => todo.id !== action.id);\r\n    case \"TOGGLE\":\r\n      return state.map(todo =>\r\n        todo.id === action.id ? { ...todo, completed: !todo.completed } : todo\r\n      );\r\n    case \"EDIT\":\r\n      return state.map(todo =>\r\n        todo.id === action.id ? { ...todo, task: action.newTask } : todo\r\n      );\r\n    default:\r\n      return state;\r\n  }\r\n};\r\nexport default reducer;\r\n","import React, { createContext } from \"react\";\r\nimport { useLocalStorageReducer } from \"../hooks/useLocalStorageReducer\";\r\nimport todoReducer from \"../reducer/todo.reducer\";\r\nconst defaultTodos = [\r\n  { id: 1, task: \"Mow the lawn using goats\", completed: false },\r\n  { id: 2, task: \"Release lady bugs into garden\", completed: true }\r\n];\r\nexport const TodosContext = createContext();\r\nexport const DispatchContext = createContext();\r\n\r\nexport function TodosProvider(props) {\r\n  const [todos, dispatch] = useLocalStorageReducer(\r\n    \"todos\",\r\n    defaultTodos,\r\n    todoReducer\r\n  );\r\n  return (\r\n    <TodosContext.Provider value={todos}>\r\n      <DispatchContext.Provider value={dispatch}>\r\n        {props.children}\r\n      </DispatchContext.Provider>\r\n    </TodosContext.Provider>\r\n  );\r\n}\r\n","import { useReducer, useEffect } from \"react\";\r\nfunction useLocalStorageReducer(key, defaultVal, reducer) {\r\n  const [state, dispatch] = useReducer(reducer, defaultVal, () => {\r\n    let value;\r\n    try {\r\n      value = JSON.parse(\r\n        window.localStorage.getItem(key) || String(defaultVal)\r\n      );\r\n    } catch (e) {\r\n      value = defaultVal;\r\n    }\r\n    return value;\r\n  });\r\n  useEffect(() => {\r\n    window.localStorage.setItem(key, JSON.stringify(state));\r\n  }, [state, key]);\r\n\r\n  return [state, dispatch];\r\n}\r\nexport { useLocalStorageReducer };\r\n","import React, { useContext } from \"react\";\r\nimport useInputState from \"./hooks/useInputState\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport { DispatchContext } from \"./context/todos.context\";\r\n\r\nfunction EditTodoForm({ id, task, toggleEditForm }) {\r\n  const dispatch = useContext(DispatchContext);\r\n  const [value, handleChange, reset] = useInputState(task);\r\n  console.log(\"EDIT FORM RENDER!!!\");\r\n  return (\r\n    <form\r\n      onSubmit={e => {\r\n        e.preventDefault();\r\n        dispatch({ type: \"EDIT\", id: id, newTask: value });\r\n        reset();\r\n        toggleEditForm();\r\n      }}\r\n      style={{ marginLeft: \"1rem\", width: \"50%\" }}\r\n    >\r\n      <TextField\r\n        margin=\"normal\"\r\n        value={value}\r\n        onChange={handleChange}\r\n        fullWidth\r\n        autoFocus\r\n      />\r\n    </form>\r\n  );\r\n}\r\nexport default EditTodoForm;\r\n","import React, { useContext, memo } from \"react\";\r\nimport useToggleState from \"./hooks/useToggleState\";\r\nimport EditTodoForm from \"./EditTodoForm\";\r\nimport ListItem from \"@material-ui/core/ListItem\";\r\nimport ListItemText from \"@material-ui/core/ListItem\";\r\nimport Checkbox from \"@material-ui/core/Checkbox\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport DeleteIcon from \"@material-ui/icons/Delete\";\r\nimport EditIcon from \"@material-ui/icons/Edit\";\r\nimport ListItemSecondaryAction from \"@material-ui/core/ListItemSecondaryAction\";\r\nimport { DispatchContext } from \"./context/todos.context\";\r\n\r\nfunction Todo({ id, task, completed }) {\r\n  const dispatch = useContext(DispatchContext);\r\n  const [isEditing, toggle] = useToggleState(false);\r\n  console.log(\"TODO RE-RENDER:\", task);\r\n  return (\r\n    <ListItem style={{ height: \"64px\" }}>\r\n      {isEditing ? (\r\n        <EditTodoForm id={id} task={task} toggleEditForm={toggle} />\r\n      ) : (\r\n        <>\r\n          <Checkbox\r\n            tabIndex={-1}\r\n            checked={completed}\r\n            onClick={() => dispatch({ type: \"TOGGLE\", id: id })}\r\n          />\r\n          <ListItemText\r\n            style={{ textDecoration: completed ? \"line-through\" : \"none\" }}\r\n          >\r\n            {task}\r\n          </ListItemText>\r\n          <ListItemSecondaryAction>\r\n            <IconButton\r\n              aria-label=\"Delete\"\r\n              onClick={() => dispatch({ type: \"REMOVE\", id: id })}\r\n            >\r\n              <DeleteIcon />\r\n            </IconButton>\r\n            <IconButton aria-label=\"Edit\" onClick={toggle}>\r\n              <EditIcon />\r\n            </IconButton>\r\n          </ListItemSecondaryAction>\r\n        </>\r\n      )}\r\n    </ListItem>\r\n  );\r\n}\r\n\r\nexport default memo(Todo);\r\n","import React, { useContext } from \"react\";\r\nimport Todo from \"./Todo\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport List from \"@material-ui/core/List\";\r\nimport Divider from \"@material-ui/core/Divider\";\r\nimport { TodosContext } from \"./context/todos.context\";\r\n\r\nfunction TodoList() {\r\n  const todos = useContext(TodosContext);\r\n  if (todos.length)\r\n    return (\r\n      <Paper>\r\n        <List>\r\n          {todos.map((todo, i) => (\r\n            // To add a key to a fragment, we have to use the long-hand version\r\n            // rather than <> </>, we have to use <React.Fragment>\r\n            <React.Fragment key={i}>\r\n              <Todo {...todo} key={todo.id} />\r\n              {i < todos.length - 1 && <Divider />}\r\n            </React.Fragment>\r\n          ))}\r\n        </List>\r\n      </Paper>\r\n    );\r\n  return null;\r\n}\r\nexport default TodoList;\r\n","import React, { useContext } from \"react\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport useInputState from \"./hooks/useInputState\";\r\nimport { DispatchContext } from \"./context/todos.context\";\r\nfunction TodoForm() {\r\n  const [value, handleChange, reset] = useInputState(\"\");\r\n  const dispatch = useContext(DispatchContext);\r\n  return (\r\n    <Paper style={{ margin: \"1rem 0\", padding: \"0 1rem\" }}>\r\n      <form\r\n        onSubmit={e => {\r\n          e.preventDefault();\r\n          dispatch({ type: \"ADD\", task: value });\r\n          reset();\r\n        }}\r\n      >\r\n        <TextField\r\n          value={value}\r\n          onChange={handleChange}\r\n          margin=\"normal\"\r\n          label=\"Add New Todo\"\r\n          fullWidth\r\n        />\r\n      </form>\r\n    </Paper>\r\n  );\r\n}\r\nexport default TodoForm;\r\n","import React from \"react\";\r\nimport TodoList from \"./TodoList\";\r\nimport TodoForm from \"./TodoForm\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport AppBar from \"@material-ui/core/AppBar\";\r\nimport Toolbar from \"@material-ui/core/Toolbar\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport { TodosProvider } from \"./context/todos.context\";\r\n\r\nfunction TodoApp() {\r\n  return (\r\n    <Paper\r\n      style={{\r\n        padding: 0,\r\n        margin: 0,\r\n        height: \"100vh\",\r\n        backgroundColor: \"#fafafa\"\r\n      }}\r\n      elevation={0}\r\n    >\r\n      <AppBar color='primary' position='static' style={{ height: \"64px\" }}>\r\n        <Toolbar>\r\n          <Typography color='inherit'>TODOS WITH HOOKS</Typography>\r\n        </Toolbar>\r\n      </AppBar>\r\n      <Grid container justify='center' style={{ marginTop: \"1rem\" }}>\r\n        <Grid item xs={11} md={8} lg={4}>\r\n          <TodosProvider>\r\n            <TodoForm />\r\n            <TodoList />\r\n          </TodosProvider>\r\n        </Grid>\r\n      </Grid>\r\n    </Paper>\r\n  );\r\n}\r\nexport default TodoApp;\r\n","import React from \"react\";\r\nimport TodoApp from \"./TodoApp\";\r\n\r\nfunction App() {\r\n  return <TodoApp />;\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}